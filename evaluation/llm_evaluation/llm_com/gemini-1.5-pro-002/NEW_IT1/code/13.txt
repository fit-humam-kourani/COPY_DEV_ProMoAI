from utils.model_generation import ModelGenerator

gen = ModelGenerator()

file_complaint = gen.activity('File complaint')
log_complaint = gen.activity('Log complaint')
assign_complaint = gen.activity('Assign complaint to relevant department')
review_complaint_details = gen.activity('Review complaint details')

approve_and_notify_customer = gen.activity('Approve and notify customer')
process_reimbursement = gen.activity('Process reimbursement')

reject_and_notify_customer = gen.activity('Reject and notify customer')

resolve_complaint = gen.activity('Resolve complaint')
provide_feedback = gen.activity('Provide feedback')


# Create copies for the activities used in different paths to avoid reuse
approve_and_notify_customer_copy = approve_and_notify_customer.copy()
reject_and_notify_customer_copy = reject_and_notify_customer.copy()
resolve_complaint_copy1 = resolve_complaint.copy()
resolve_complaint_copy2 = resolve_complaint.copy()



xor_approve_reject = gen.xor(approve_and_notify_customer, reject_and_notify_customer)

refund_path = gen.partial_order(dependencies=[(approve_and_notify_customer_copy, process_reimbursement), (process_reimbursement, resolve_complaint_copy1)])
reject_path = gen.partial_order(dependencies=[(reject_and_notify_customer_copy, resolve_complaint_copy2)])

# Instead of having separate paths for reject and refund, combine them using the xor_approve_reject construct
# This simplifies the model and directly reflects the process description, 
# where the resolution happens *after* the approval/rejection decision.

final_model = gen.partial_order(dependencies=[
    (file_complaint, log_complaint),
    (log_complaint, assign_complaint),
    (assign_complaint, review_complaint_details),
    (review_complaint_details, xor_approve_reject),
    (xor_approve_reject, resolve_complaint),  # Resolve complaint after decision
    (resolve_complaint, provide_feedback)])