from utils.model_generation import ModelGenerator
gen = ModelGenerator()

# Define activities
identify_needs = gen.activity('Identify development needs or career aspirations')
create_dev_plan = gen.activity('Create personal development plan')
skill_enhancement = gen.activity('Work on skill enhancement')
receive_feedback = gen.activity('Receive feedback and evaluation from supervisors')
consider_promotion = gen.activity('Consider employee for promotion or new role')
formal_review = gen.activity('Conducts formal performance review')
approve_promotion = gen.activity('Approve promotion')
set_responsibilities = gen.activity('Set new responsibilities')
adjust_compensation = gen.activity('Adjust compensation')
transition_role = gen.activity('Transition into new role')

# Skill enhancement and feedback loop
skill_feedback_loop = gen.loop(do=skill_enhancement, redo=receive_feedback)

# Promotion review and approval process
review_approval_poset = gen.partial_order(dependencies=[
    (formal_review, approve_promotion),
    (approve_promotion, set_responsibilities),
    (set_responsibilities, adjust_compensation),
    (adjust_compensation, transition_role)
])

# Combine initial, feedback, and promotion paths
development_poset = gen.partial_order(dependencies=[
    (identify_needs, create_dev_plan),
    (create_dev_plan, skill_feedback_loop),
    (skill_feedback_loop, consider_promotion),
    (consider_promotion, review_approval_poset)
])

# Final model
final_model = development_poset