from utils.model_generation import ModelGenerator
gen = ModelGenerator()

# Initial order and payment processing
place_order = gen.activity('Place order')
record_order_details = gen.activity('Record order details')
process_payment = gen.activity('Process payment')
notify_failed_payment = gen.activity('Notify about failed payment')

# Payment choice
payment_success = gen.xor(notify_failed_payment, None)
payment_poset = gen.partial_order(dependencies=[(record_order_details, process_payment), (process_payment, payment_success)])

# Inventory check and back-order handling
check_stock = gen.activity('Check stock availability')
initiate_back_order = gen.activity('Initiate back-order')
inform_delay = gen.activity('Inform customer about delay')
receive_back_order = gen.activity('Receive back-order')
back_order_process = gen.partial_order(dependencies=[(initiate_back_order, inform_delay), (inform_delay, receive_back_order)])

stock_check_choice = gen.xor(back_order_process, None)
inventory_check_poset = gen.partial_order(dependencies=[(check_stock, stock_check_choice)])

# Picking, quality control, and packaging
pick_items = gen.activity('Pick items from warehouse')
quality_control = gen.activity('Perform quality control checks')
package_items = gen.activity('Package items')
gift_wrap = gen.activity('Gift wrap items')
optional_gift_wrap = gen.xor(gift_wrap, None)
packaging_poset = gen.partial_order(dependencies=[(pick_items, quality_control), (quality_control, package_items), (package_items, optional_gift_wrap)])

# Shipping preparation
prepare_shipping_docs = gen.activity('Prepare shipping documents and labels')
prepare_international_docs = gen.activity('Prepare documentation for international orders')
shipping_choice = gen.xor(prepare_international_docs, None)
shipping_docs_poset = gen.partial_order(dependencies=[(prepare_shipping_docs, shipping_choice)])

# Dispatch and post-dispatch activities
dispatch_order = gen.activity('Dispatch order')
send_confirmation = gen.activity('Send shipping confirmation to customer')
update_inventory = gen.activity('Update inventory levels')
confirm_delivery = gen.activity('Confirm delivery')
send_follow_up = gen.activity('Send follow-up email')

# Creating unique copies for dispatch dependencies to ensure uniqueness in the model
packaging_poset_copy = packaging_poset.copy()
shipping_docs_poset_copy = shipping_docs_poset.copy()
dispatch_poset = gen.partial_order(dependencies=[
    (packaging_poset_copy, shipping_docs_poset_copy),
    (shipping_docs_poset_copy, dispatch_order),
    (dispatch_order, send_confirmation),
    (send_confirmation, update_inventory),
    (update_inventory, confirm_delivery),
    (confirm_delivery, send_follow_up)
])

# Returns process
customer_reports_issue = gen.activity('Customer reports issue')
send_return_label = gen.activity('Send return shipping label')
receive_returned_items = gen.activity('Receive returned items')
inspect_returned_items = gen.activity('Inspect returned items')
process_refund = gen.activity('Process refund')
process_replacement = gen.activity('Process replacement')
refund_or_replace = gen.xor(process_refund, process_replacement)

returns_process_poset = gen.partial_order(dependencies=[
    (send_return_label, receive_returned_items),
    (receive_returned_items, inspect_returned_items),
    (inspect_returned_items, refund_or_replace)
])

# Main process with customer issue handling
# Creating copies to avoid reuse error
inventory_check_poset_copy = inventory_check_poset.copy()
packaging_poset_final = packaging_poset.copy()
dispatch_poset_final = dispatch_poset.copy()
returns_process = gen.xor(customer_reports_issue, returns_process_poset)

main_process_poset = gen.partial_order(dependencies=[
    (place_order, payment_poset),
    (payment_poset, inventory_check_poset_copy),
    (inventory_check_poset_copy, packaging_poset_final),
    (dispatch_poset_final, returns_process)
])

final_model = main_process_poset