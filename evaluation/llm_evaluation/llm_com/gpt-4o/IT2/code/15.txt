from utils.model_generation import ModelGenerator

gen = ModelGenerator()

# Define activities
schedule_audit = gen.activity('Schedule compliance audit')
prepare_docs = gen.activity('Prepare documentation')
gather_evidence = gen.activity('Gather evidence')
self_assessment = gen.activity('Conduct self-assessment')
external_audit = gen.activity('Conduct external audit')
identify_gaps = gen.activity('Identify gaps or issues')
make_corrections = gen.activity('Make necessary corrections or improvements')
final_audit = gen.activity('Conduct final audit')
final_audit_copy = final_audit.copy()  # Create a copy to avoid reuse error
award_certification = gen.activity('Award certification')
issue_documents = gen.activity('Issue official documents')

# Prepare submodel for internal preparation steps
internal_preparation = gen.partial_order(
    dependencies=[(prepare_docs, gather_evidence), (gather_evidence, self_assessment)])

# Define process for audit and improvement
audit_with_corrections = gen.partial_order(
    dependencies=[(external_audit, identify_gaps), (identify_gaps, make_corrections)])

# Full process with external and final audit, ensuring unique instances
external_and_final_audit = gen.partial_order(
    dependencies=[(internal_preparation, audit_with_corrections),
                  (audit_with_corrections, final_audit)])

# Define main process flow with optional certification step at the end
process_flow = gen.partial_order(
    dependencies=[(schedule_audit, external_and_final_audit),
                  (final_audit_copy, award_certification),
                  (award_certification, issue_documents)])

final_model = process_flow