from utils.model_generation import ModelGenerator

gen = ModelGenerator()

# Activities
identify_needs = gen.activity("Identify development needs or career aspirations")
create_pdp = gen.activity("Create personal development plan")
work_on_enhancement = gen.activity("Work on skill enhancement")
receive_feedback = gen.activity("Receive feedback and evaluation from supervisors")
consider_promotion = gen.activity("Consider employee for promotion or new role")
conduct_review = gen.activity("Conducts formal performance review")
approve_promotion = gen.activity("Approve promotion")
set_responsibilities = gen.activity("Set new responsibilities")
adjust_compensation = gen.activity("Adjust compensation")
transition_role = gen.activity("Transition into new role")


# Partial Orders and Choices

# Combining initial steps (identification of needs) with PDP creation
poset_initial = gen.partial_order(dependencies=[(identify_needs, create_pdp)])

# Combining PDP and skill enhancement with feedback. Creating copies to avoid reuse.
create_pdp_copy = create_pdp.copy()
work_on_enhancement_copy = work_on_enhancement.copy()
receive_feedback_copy1 = receive_feedback.copy() #copy for poset_pdp_enhancement
poset_pdp_enhancement = gen.partial_order(dependencies=[(create_pdp_copy, work_on_enhancement_copy), (work_on_enhancement_copy, receive_feedback_copy1)])

# Combining skill enhancement and feedback with promotion consideration. Creating copies to avoid reuse.
receive_feedback_copy2 = receive_feedback.copy() #copy for poset_consider_promotion
consider_promotion_copy1 = consider_promotion.copy()
poset_consider_promotion = gen.partial_order(dependencies=[(receive_feedback_copy2, consider_promotion_copy1)])

# Promotion process. Creating copies to avoid reuse where necessary.
consider_promotion_copy2 = consider_promotion.copy() #another copy for poset_promotion
conduct_review_copy = conduct_review.copy()
approve_promotion_copy = approve_promotion.copy()
set_responsibilities_copy = set_responsibilities.copy()
adjust_compensation_copy = adjust_compensation.copy()
poset_promotion = gen.partial_order(dependencies=[(consider_promotion_copy2, conduct_review_copy), (conduct_review_copy, approve_promotion_copy), (approve_promotion_copy, set_responsibilities_copy), (approve_promotion_copy, adjust_compensation_copy), (set_responsibilities_copy, transition_role), (adjust_compensation_copy, transition_role)])


# Combining all into a single process
final_model = gen.partial_order(dependencies=[(poset_initial, poset_pdp_enhancement), (poset_pdp_enhancement, poset_consider_promotion),(poset_consider_promotion, poset_promotion)])