from utils.model_generation import ModelGenerator

gen = ModelGenerator()

# Activities
report_incident = gen.activity('Report incident')
log_report = gen.activity('Log report into tracking system')
assign_report = gen.activity('Assign report to appropriate team')
gather_info = gen.activity('Gather necessary information')
identify_cause = gen.activity('Identify cause of incident')
propose_corrective_actions = gen.activity('Propose corrective actions')
approve_actions = gen.activity('Approve actions') # Added for clarity, implied in original description
implement_fix = gen.activity('Implement fix')
conduct_training = gen.activity('Conduct training') # Added for clarity, possible corrective action
change_policy = gen.activity('Change policy') # Added for clarity, possible corrective action
verify_resolution = gen.activity('Verify resolution')
conduct_followup = gen.activity('Conduct follow-up')
close_report = gen.activity('Close incident report')
notify_stakeholders = gen.activity('Notify all stakeholders')


# Partial Order for Corrective Actions (Choice of actions)
corrective_actions_poset = gen.partial_order(dependencies=[(implement_fix,), (conduct_training,), (change_policy,)])

#Main Process
main_poset = gen.partial_order(dependencies=[
    (report_incident, log_report),
    (log_report, assign_report),
    (assign_report, gather_info),
    (gather_info, identify_cause),
    (identify_cause, propose_corrective_actions),
    (propose_corrective_actions, approve_actions),
    (approve_actions, corrective_actions_poset), # Connect approval to the choice of actions.
    (corrective_actions_poset, verify_resolution),
    (verify_resolution, conduct_followup),
    (conduct_followup, close_report),
    (close_report, notify_stakeholders)
])

final_model = main_poset