from utils.model_generation import ModelGenerator

gen = ModelGenerator(True, True)

# Activities
place_order = gen.activity('Place order')
record_order_details = gen.activity('Record order details')
process_payment = gen.activity('Process payment')
notify_about_failed_payment = gen.activity('Notify about failed payment')
check_stock_availability = gen.activity('Check stock availability')
check_stock_availability_copy1 = gen.activity('Check stock availability')  # copy to avoid reuse
initiate_back_order = gen.activity('Initiate back-order')
initiate_back_order_copy = gen.activity('Initiate back-order')  # copy to avoid reuse
inform_customer_about_delay = gen.activity('Inform customer about delay')
receive_back_order = gen.activity('Receive back-order')
pick_items_from_warehouse = gen.activity('Pick items from warehouse')
perform_quality_control_checks = gen.activity('Perform quality control checks')
package_items = gen.activity('Package items')
gift_wrap_items = gen.activity('Gift wrap items')
prepare_shipping_documents_and_labels = gen.activity(
    'Prepare shipping documents and labels'
)
prepare_documentation_for_international_orders = gen.activity(
    'Prepare documentation for international orders'
)
dispatch_order = gen.activity('Dispatch order')
dispatch_order_copy = gen.activity('Dispatch order')  # copy to avoid reuse
send_shipping_confirmation_to_customer = gen.activity(
    'Send shipping confirmation to customer'
)
update_inventory_levels = gen.activity('Update inventory levels')
send_follow_up_email = gen.activity('Send follow-up email')
customer_reports_issue = gen.activity('Customer reports issue')
send_return_shipping_label = gen.activity('Send return shipping label')
receive_returned_items = gen.activity('Receive returned items')
inspect_returned_items = gen.activity('Inspect returned items')
process_refund = gen.activity('Process refund')
process_replacement = gen.activity('Process replacement')
confirm_delivery = gen.activity('Confirm delivery')
confirm_delivery_copy = gen.activity('Confirm delivery')  # copy to avoid reuse


# Subprocesses
payment_processing = gen.xor(process_payment, notify_about_failed_payment)
stock_availability_check = gen.xor(
    check_stock_availability_copy1, initiate_back_order_copy
)

backorder_process = gen.partial_order(
    dependencies=[
        (initiate_back_order_copy, inform_customer_about_delay),
        (inform_customer_about_delay, receive_back_order),
    ]
)

in_stock_process = gen.partial_order(
    dependencies=[
        (pick_items_from_warehouse, perform_quality_control_checks),
        (perform_quality_control_checks, package_items),
    ]
)

shipping_process = gen.partial_order(
    dependencies=[
        (prepare_shipping_documents_and_labels, dispatch_order_copy),
        (prepare_documentation_for_international_orders, dispatch_order_copy),
    ]
)

post_dispatch = gen.partial_order(
    dependencies=[(update_inventory_levels, send_follow_up_email)]
)

returns_process = gen.partial_order(
    dependencies=[
        (send_return_shipping_label, receive_returned_items),
        (receive_returned_items, inspect_returned_items),
        (
            inspect_returned_items,
            gen.xor(process_refund, process_replacement),
        ),
    ]
)

customer_feedback = gen.xor(None, customer_reports_issue)


# Combining sub-processes
order_fulfillment_core = gen.partial_order(
    dependencies=[
        (place_order, record_order_details),
        (record_order_details, payment_processing),
        (payment_processing, check_stock_availability),
    ]
)


# Combining backorder and in-stock paths
order_fulfillment_core_copy_1 = order_fulfillment_core.copy()
order_fulfillment_core_copy_2 = order_fulfillment_core.copy()

fulfillment_with_backorder = gen.loop(
    do=order_fulfillment_core_copy_1, redo=backorder_process
)
fulfillment_in_stock = gen.partial_order(
    dependencies=[(order_fulfillment_core_copy_2, in_stock_process)]
)


# Main process
main_process = gen.xor(fulfillment_in_stock, fulfillment_with_backorder)

final_process = gen.partial_order(
    dependencies=[
        (main_process, shipping_process),
        (shipping_process, dispatch_order_copy),
        (dispatch_order_copy, send_shipping_confirmation_to_customer),
        (send_shipping_confirmation_to_customer, confirm_delivery_copy),
        (confirm_delivery_copy, customer_feedback),
        (customer_feedback, post_dispatch),
        (customer_reports_issue, returns_process),
    ]
)


final_model = final_process