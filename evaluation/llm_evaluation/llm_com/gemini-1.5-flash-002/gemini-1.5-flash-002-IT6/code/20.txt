from utils.model_generation import ModelGenerator

gen = ModelGenerator()

# Activities
guest_calls = gen.activity("Guest calls room service")
manager_takes_order = gen.activity("Manager takes down the order")
manager_kitchen = gen.activity("Manager submits order ticket to kitchen")
kitchen_prepares = gen.activity("Kitchen prepares food")
manager_sommelier = gen.activity("Manager gives order to sommelier")
sommelier_prepares = gen.activity("Sommelier fetches wine and prepare alcoholic beverages")
waiter_prepares_drinks = gen.activity("Waiter prepares nonalcoholic drinks")
waiter_readies_cart = gen.activity("Waiter readies cart")
manager_assigns_waiter = gen.activity("Manager assigns order to waiter")
waiter_delivers = gen.activity("Waiter delivers order to guest's room")
waiter_returns = gen.activity("Waiter returns to room-service station")
waiter_debits = gen.activity("Waiter debits guest's account")
waiter_waits = gen.activity("Waiter waits/delays debiting")


# Subprocesses
sommelier_process = gen.xor(sommelier_prepares, None)  # Alcoholic beverages are optional

# Concurrent processes during order fulfillment
#Corrected to avoid circular dependencies and ensure irreflexivity
preparation_processes = gen.partial_order(dependencies=[(manager_kitchen, kitchen_prepares),
                                                        (manager_assigns_waiter, waiter_readies_cart),
                                                        (manager_assigns_waiter, waiter_prepares_drinks),
                                                        (manager_sommelier, sommelier_process)])


# Combining processes - Corrected to avoid reusing submodels
kitchen_prepares_copy = kitchen_prepares.copy()  # Create a copy to avoid reuse
waiter_readies_cart_copy = waiter_readies_cart.copy()
waiter_prepares_drinks_copy = waiter_prepares_drinks.copy()
sommelier_process_copy = sommelier_process.copy()

fulfillment_process = gen.partial_order(dependencies=[(kitchen_prepares_copy, waiter_delivers),
                                                     (sommelier_process_copy, waiter_delivers),
                                                     (waiter_readies_cart_copy, waiter_delivers),
                                                     (waiter_prepares_drinks_copy, waiter_delivers)])


# Debiting choice
debiting_choice = gen.xor(waiter_debits, waiter_waits)

# Final sequence
waiter_delivers_copy = waiter_delivers.copy()
waiter_returns_copy = waiter_returns.copy()
final_sequence = gen.partial_order(dependencies=[(waiter_delivers_copy, waiter_returns_copy),
                                                  (waiter_returns_copy, debiting_choice)])

# Complete process model
#Corrected to avoid circular dependencies and ensure irreflexivity
manager_takes_order_copy = manager_takes_order.copy()
preparation_processes_copy = preparation_processes.copy()
fulfillment_process_copy = fulfillment_process.copy()
final_sequence_copy = final_sequence.copy()

complete_process = gen.partial_order(dependencies=[(guest_calls, manager_takes_order_copy),
                                                    (manager_takes_order_copy, preparation_processes_copy),
                                                    (preparation_processes_copy, fulfillment_process_copy),
                                                    (fulfillment_process_copy, final_sequence_copy)])

final_model = complete_process