from utils.model_generation import ModelGenerator

gen = ModelGenerator()

# Activities
customer_signs_up = gen.activity('Customer signs up')
generate_account = gen.activity('Generate account')
assign_access = gen.activity('Assign access')
set_automatic_triggers_for_billing_cycles = gen.activity('Set automatic triggers for billing cycles')
send_regular_updates = gen.activity('Send regular updates')
send_product_enhancements = gen.activity('Send product enhancements')
send_renewal_notifications = gen.activity('Send renewal notifications')
customer_submits_cancellation_request = gen.activity('Customer submits cancellation request')
support_team_handles_request = gen.activity('Support team handles request')
apply_refund = gen.activity('apply refund')
apply_charges = gen.activity('apply charges')
deactivate_subscription = gen.activity('Deactivate subscription')
settle_final_account_balance = gen.activity('Settle final account balance')


# Subprocesses
account_creation = gen.partial_order(dependencies=[(generate_account, assign_access), (assign_access, set_automatic_triggers_for_billing_cycles)])
updates = gen.partial_order(dependencies=[(send_regular_updates,), (send_product_enhancements,), (send_renewal_notifications,)])
cancellation_handling = gen.partial_order(dependencies=[(support_team_handles_request, apply_refund), (support_team_handles_request, apply_charges)])
final_settlement = gen.partial_order(dependencies=[(deactivate_subscription, settle_final_account_balance)])

# Main process flow
customer_signs_up_copy = customer_signs_up.copy() #create a copy to avoid reuse
optional_cancellation = gen.xor(cancellation_handling, None)
main_process = gen.partial_order(dependencies=[(customer_signs_up_copy, account_creation), (account_creation, updates), (customer_submits_cancellation_request, optional_cancellation)])


#Complete process including optional cancellation path.
final_model = gen.partial_order(dependencies=[(customer_signs_up, main_process), (main_process, final_settlement)])