from utils.model_generation import ModelGenerator

gen = ModelGenerator()

# Activities
identify_idea = gen.activity('Identify idea for new product or improvement')
conduct_initial_research = gen.activity('Conduct initial research')
conduct_feasibility_studies = gen.activity('Conduct feasibility studies')
draft_design_concepts = gen.activity('Draft design concepts')
select_promising_design = gen.activity('Select promising design')
build_prototype = gen.activity('Build prototype')
test_functionality = gen.activity('Test functionality')
test_safety = gen.activity('Test safety')
test_market_potential = gen.activity('Test market potential')
collect_feedback = gen.activity('Collect feedback from testing phase')
refine_prototype = gen.activity('Refine prototype')
approve_prototype = gen.activity('Approve prototype for further development')
discard_prototype = gen.activity('Discard prototype')

# Subprocesses
initial_research_phase = gen.partial_order(dependencies=[(identify_idea, conduct_initial_research), (conduct_initial_research, conduct_feasibility_studies), (conduct_feasibility_studies, draft_design_concepts.copy())]) 
design_selection = gen.partial_order(dependencies=[(draft_design_concepts.copy(), select_promising_design.copy())]) 

prototype_build = gen.partial_order(dependencies=[(select_promising_design.copy(), build_prototype.copy())]) 

# Testing Loop
testing_phase = gen.partial_order(dependencies=[(build_prototype.copy(), test_functionality), (build_prototype.copy(), test_safety), (build_prototype.copy(), test_market_potential)])
feedback_loop = gen.loop(do=testing_phase, redo=gen.partial_order(dependencies=[(collect_feedback, refine_prototype)]))

# Final Choice
final_choice = gen.xor(approve_prototype, discard_prototype)

# Combine everything
final_poset = gen.partial_order(dependencies=[(initial_research_phase, design_selection), (design_selection, prototype_build), (prototype_build, feedback_loop), (feedback_loop, final_choice)])

final_model = final_poset