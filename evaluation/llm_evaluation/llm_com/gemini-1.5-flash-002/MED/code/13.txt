from utils.model_generation import ModelGenerator

gen = ModelGenerator()

# Activities
file_complaint = gen.activity('File complaint')
log_complaint = gen.activity('Log complaint')
assign_complaint = gen.activity('Assign complaint to relevant department')
review_complaint = gen.activity('Review complaint details')
approve_notify = gen.activity('Approve and notify customer')
reject_notify = gen.activity('Reject and notify customer')
process_reimbursement = gen.activity('Process reimbursement')
resolve_complaint_copy1 = gen.activity('Resolve complaint')
resolve_complaint_copy2 = gen.activity('Resolve complaint')
provide_feedback = gen.activity('Provide feedback')


# Subprocesses
initial_steps = gen.partial_order(dependencies=[(file_complaint, log_complaint), (log_complaint, assign_complaint), (assign_complaint, review_complaint)])
decision_path = gen.xor(approve_notify.copy(), reject_notify.copy())

#Corrected approved and rejected paths to use copies of activities and resolve_complaint
approved_path = gen.partial_order(dependencies=[(approve_notify.copy(), process_reimbursement), (process_reimbursement, resolve_complaint_copy1)])
rejected_path = gen.partial_order(dependencies=[(reject_notify.copy(), resolve_complaint_copy2)])

resolution_path = gen.xor(approved_path, rejected_path)

final_steps = gen.partial_order(dependencies=[(resolve_complaint_copy2.copy(), provide_feedback)]) #Corrected to use a copy of resolve_complaint_copy2


#Combine Subprocesses
combined_process = gen.partial_order(dependencies=[(initial_steps, decision_path), (decision_path, resolution_path), (resolution_path, final_steps)])

final_model = combined_process