from utils.model_generation import ModelGenerator

gen = ModelGenerator()

# Activities
file_complaint = gen.activity('File complaint')
log_complaint = gen.activity('Log complaint')
review_complaint_details = gen.activity('Review complaint details')
assign_complaint = gen.activity('Assign complaint to relevant department')
decide_validity = gen.activity('Decision on validity and refund eligibility')
approve_notify = gen.activity('Approve and notify customer')
process_reimbursement = gen.activity('Process reimbursement')
reject_notify = gen.activity('Reject and notify customer')
resolve_complaint = gen.activity('Resolve complaint')
provide_feedback = gen.activity('Provide feedback')


# Partial order for initial steps
initial_poset = gen.partial_order(dependencies=[(file_complaint, log_complaint), (log_complaint, review_complaint_details), (review_complaint_details, assign_complaint)])

# Choice for valid/invalid complaint
validity_choice = gen.xor(approve_notify.copy(), reject_notify.copy())  # Create copies to avoid reuse

# Partial order after validity decision. Note the use of copies to avoid reuse.
approve_path = gen.partial_order(dependencies=[(approve_notify, process_reimbursement), (process_reimbursement, resolve_complaint.copy())])  # resolve_complaint copy
reject_path = gen.partial_order(dependencies=[(reject_notify, resolve_complaint.copy())])  # resolve_complaint copy
post_decision_poset = gen.partial_order(dependencies=[(decide_validity.copy(), approve_path), (decide_validity.copy(), reject_path)]) #decide_validity copy

# Final partial order incorporating feedback. resolve_complaint is used only once.
final_poset = gen.partial_order(dependencies=[(initial_poset, decide_validity.copy()), (decide_validity.copy(), post_decision_poset), (resolve_complaint, provide_feedback)]) #decide_validity copy

# Make the feedback optional
optional_feedback = gen.xor(final_poset, resolve_complaint.copy())  # Added copy to avoid reuse error

final_model = optional_feedback