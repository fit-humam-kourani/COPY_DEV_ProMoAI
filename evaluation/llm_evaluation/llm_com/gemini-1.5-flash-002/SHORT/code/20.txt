from utils.model_generation import ModelGenerator

gen = ModelGenerator()

# Activities
guest_calls = gen.activity("Guest calls room service")
manager_takes_order = gen.activity("Manager takes down the order")
manager_assigns_waiter = gen.activity("Manager assigns order to waiter")
manager_submits_kitchen = gen.activity("Manager submits order ticket to kitchen")
manager_gives_sommelier = gen.activity("Manager gives order to sommelier")
kitchen_prepares = gen.activity("Kitchen prepares food")
sommelier_prepares = gen.activity("Sommelier fetches wine and prepare alcoholic beverages")
waiter_prepares_drinks = gen.activity("Waiter prepares nonalcoholic drinks")
waiter_readies_cart = gen.activity("Waiter readies cart")
waiter_delivers = gen.activity("Waiter delivers order to guest's room")
waiter_waits_debiting = gen.activity("Waiter waits/delays debiting")
waiter_debits = gen.activity("Waiter debits guest's account")
waiter_returns = gen.activity("Waiter returns to room-service station")


# Partial Order for concurrent actions after manager assigns the order
poset_1 = gen.partial_order(dependencies=[
    (manager_assigns_waiter.copy(), manager_submits_kitchen), # Create a copy to avoid reuse
    (manager_assigns_waiter.copy(), manager_gives_sommelier), # Create a copy to avoid reuse
    (manager_assigns_waiter.copy(), waiter_prepares_drinks), # Create a copy to avoid reuse
    (manager_assigns_waiter.copy(), waiter_readies_cart.copy()), # Create a copy to avoid reuse
    (manager_submits_kitchen, kitchen_prepares.copy()), # Create a copy to avoid reuse
    (manager_gives_sommelier, sommelier_prepares.copy()), # Create a copy to avoid reuse
    (waiter_prepares_drinks, waiter_readies_cart.copy()), # Create a copy to avoid reuse

])

#Partial Order to combine preparation activities
poset_2 = gen.partial_order(dependencies=[
    (poset_1, waiter_delivers),
    (kitchen_prepares.copy(), waiter_delivers), # Create a copy to avoid reuse
    (sommelier_prepares.copy(), waiter_delivers), # Create a copy to avoid reuse
    (waiter_readies_cart.copy(), waiter_delivers), # Create a copy to avoid reuse
    (waiter_delivers, waiter_returns),
    (waiter_returns, waiter_waits_debiting),
    (waiter_waits_debiting, waiter_debits)
])


#Sequential Dependencies
final_model = gen.partial_order(dependencies=[(guest_calls, manager_takes_order), (manager_takes_order, manager_assigns_waiter.copy()), (manager_assigns_waiter.copy(), poset_2)]) # Create a copy to avoid reuse