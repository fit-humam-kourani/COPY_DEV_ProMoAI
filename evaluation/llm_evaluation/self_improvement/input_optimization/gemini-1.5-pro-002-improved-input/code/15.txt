from utils.model_generation import ModelGenerator

gen = ModelGenerator()

# Initial activities
schedule_audit = gen.activity('Schedule compliance audit')
prepare_documentation = gen.activity('Prepare documentation')
gather_evidence = gen.activity('Gather evidence')
conduct_self_assessment = gen.activity('Conduct self-assessment')

# Parallel activities before external audit
parallel_activities = gen.partial_order(dependencies=[(prepare_documentation,), (gather_evidence,), (conduct_self_assessment,)])

# External audit and potential corrections
conduct_external_audit = gen.activity('Conduct external audit')
identify_gaps = gen.activity('Identify gaps or issues')
make_corrections = gen.activity('Make necessary corrections or improvements')
conduct_final_audit = gen.activity('Conduct final audit')

# Optional correction loop
corrections_loop = gen.loop(do=make_corrections, redo=None)
corrections_path = gen.partial_order(dependencies=[(identify_gaps, corrections_loop), (corrections_loop, conduct_final_audit)])

optional_corrections = gen.xor(corrections_path, conduct_final_audit.copy())


# Certification or no certification
award_certification = gen.activity('Award certification')
issue_documents = gen.activity('Issue official documents')
certification_path = gen.partial_order(dependencies=[(award_certification, issue_documents)])
no_certification = None # Implicitly ends the process
final_choice = gen.xor(certification_path, no_certification)

# Combine all parts of the process
final_model = gen.partial_order(dependencies=[
    (schedule_audit, parallel_activities),
    (parallel_activities, conduct_external_audit),
    (conduct_external_audit, optional_corrections),
    (optional_corrections, final_choice)
])