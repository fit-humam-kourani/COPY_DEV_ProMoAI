from utils.model_generation import ModelGenerator

gen = ModelGenerator()

# Initial activities
identify_idea = gen.activity('Identify idea for new product or improvement')
conduct_initial_research = gen.activity('Conduct initial research')
conduct_feasibility_studies = gen.activity('Conduct feasibility studies')
draft_design_concepts = gen.activity('Draft design concepts')
select_promising_design = gen.activity('Select promising design')
build_prototype = gen.activity('Build prototype')

# Testing phase activities
test_functionality = gen.activity('Test functionality')
test_safety = gen.activity('Test safety')
test_market_potential = gen.activity('Test market potential')
collect_feedback = gen.activity('Collect feedback from testing phase')


# Refinement and retesting loop
refine_prototype = gen.activity('Refine prototype')

testing_phase = gen.partial_order(dependencies=[(test_functionality,), (test_safety,), (test_market_potential,)]) # Test are concurrent

testing_and_feedback = gen.partial_order(dependencies=[(testing_phase, collect_feedback)])

refinement_loop = gen.loop(do=testing_and_feedback.copy(), redo=refine_prototype) # Create a copy for the loop


need_refinement_path = gen.partial_order(dependencies=[(refinement_loop,)])

no_refinement_needed_path = gen.partial_order(dependencies=[(testing_and_feedback,)])


refinement_choice = gen.xor(need_refinement_path, no_refinement_needed_path)




# Final decision
approve_prototype = gen.activity('Approve prototype for further development')
discard_prototype = gen.activity('Discard prototype')
final_decision = gen.xor(approve_prototype, discard_prototype)

# Combine all parts of the process
final_model = gen.partial_order(
    dependencies=[
        (identify_idea, conduct_initial_research),
        (conduct_initial_research, conduct_feasibility_studies),
        (conduct_feasibility_studies, draft_design_concepts),
        (draft_design_concepts, select_promising_design),
        (select_promising_design, build_prototype),
        (build_prototype, refinement_choice),
        (refinement_choice, final_decision)
    ]
)