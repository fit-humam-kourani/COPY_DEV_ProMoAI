from utils.model_generation import ModelGenerator

gen = ModelGenerator()

# Initial activities
identify_needs = gen.activity('Identify development needs or career aspirations')
create_plan = gen.activity('Create personal development plan')

# Skill development and feedback loop
work_on_skills = gen.activity('Work on skill enhancement')
receive_feedback = gen.activity('Receive feedback and evaluation from supervisors')
skill_feedback_poset = gen.partial_order(dependencies=[(work_on_skills,), (receive_feedback,)])  # Concurrent activities
skill_development_loop = gen.loop(do=skill_feedback_poset, redo=None) # Self-loop to model skill development cycle


# Post-milestone activities
consider_promotion = gen.activity('Consider employee for promotion or new role')
formal_review = gen.activity('Conducts formal performance review')

# Promotion success/failure paths
approve_promotion = gen.activity('Approve promotion')
set_responsibilities = gen.activity('Set new responsibilities')
adjust_compensation = gen.activity('Adjust compensation')
promotion_finalized_poset = gen.partial_order(dependencies=[(approve_promotion,), (set_responsibilities,), (adjust_compensation,)])

continue_development = skill_development_loop.copy() # Continue skill development if not promoted
promotion_choice = gen.xor(promotion_finalized_poset, continue_development)


transition_role = gen.activity('Transition into new role')


# Combine all parts of the process
final_model = gen.partial_order(
    dependencies=[
        (identify_needs, create_plan),
        (create_plan, skill_development_loop),
        (skill_development_loop, consider_promotion),
        (consider_promotion, formal_review),
        (formal_review, promotion_choice),
        (promotion_choice, transition_role)
    ]
)