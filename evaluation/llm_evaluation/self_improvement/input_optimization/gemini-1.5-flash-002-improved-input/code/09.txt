from utils.model_generation import ModelGenerator

gen = ModelGenerator()

# Activities
identify_idea = gen.activity("Identify idea for new product or improvement")
conduct_initial_research = gen.activity("Conduct initial research")
conduct_feasibility_studies = gen.activity("Conduct feasibility studies")
draft_design_concepts = gen.activity("Draft design concepts")
select_promising_design = gen.activity("Select promising design")
build_prototype = gen.activity("Build prototype")
test_functionality = gen.activity("Test functionality")
test_safety = gen.activity("Test safety")
test_market_potential = gen.activity("Test market potential")
collect_feedback = gen.activity("Collect feedback from testing phase")
refine_prototype = gen.activity("Refine prototype")
approve_prototype = gen.activity("Approve prototype for further development")
discard_prototype = gen.activity("Discard prototype")


# Subprocesses
initial_research_phase = gen.partial_order(dependencies=[(conduct_initial_research, conduct_feasibility_studies), (conduct_feasibility_studies, draft_design_concepts)])
testing_phase = gen.partial_order(dependencies=[(test_functionality, collect_feedback), (test_safety, collect_feedback), (test_market_potential, collect_feedback)])
refine_loop = gen.loop(do=refine_prototype, redo=testing_phase.copy()) #Fixed: Created a copy of testing_phase


# Combining subprocesses
poset_before_decision = gen.partial_order(dependencies=[(identify_idea, initial_research_phase), (initial_research_phase, select_promising_design), (select_promising_design, build_prototype), (build_prototype, testing_phase.copy())]) #Fixed: Created a copy of testing_phase

final_choice = gen.xor(approve_prototype, discard_prototype)

# Handling the loop and final decision
main_process = gen.partial_order(dependencies=[(poset_before_decision, final_choice), (refine_loop, final_choice)])

final_model = gen.xor(main_process, None)