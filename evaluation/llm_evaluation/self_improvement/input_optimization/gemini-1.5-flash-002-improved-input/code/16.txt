from utils.model_generation import ModelGenerator

gen = ModelGenerator()

# Activities
send_notification = gen.activity('Send notification')
prepare_financial_statements = gen.activity('Prepare financial statements')
gather_necessary_documents = gen.activity('Gather necessary documents')
check_regulatory_updates = gen.activity('Check regulatory updates')
submit_documents = gen.activity('Submit documents')
review_submission = gen.activity('Review submission')
request_clarifications_of_discrepancies = gen.activity('Request clarifications of discrepancies')
receive_clarifications = gen.activity('Receive clarifications')
evaluate_financial_risks = gen.activity('Evaluate financial risks')
evaluate_operational_risks = gen.activity('Evaluate operational risks')
evaluate_compliance_risks = gen.activity('Evaluate compliance risks')
conduct_data_analysis = gen.activity('Conduct data analysis')
conduct_interviews = gen.activity('Conduct interviews')
perform_site_visits = gen.activity('Perform site visits')
compile_audit_report = gen.activity('Compile audit report')
review_report_by_audit_director = gen.activity('Review report by audit director')
approve_report = gen.activity('Approve report')
send_report_for_revision = gen.activity('Send report for revision')
update_and_resubmit_report = gen.activity('Update and resubmit report')
distribute_final_report = gen.activity('Distribute final report')
archive_report = gen.activity('Archive report')
close_audit_process = gen.activity('Close audit process')
launch_detailed_investigation = gen.activity('Launch detailed investigation')


# Concurrent phase 1
concurrent_phase_1 = gen.partial_order(dependencies=[(prepare_financial_statements,), (gather_necessary_documents,), (check_regulatory_updates,)])

# XOR choice for discrepancies
review_submission_copy1 = review_submission.copy()  # Create a copy to avoid reuse
review_submission_copy2 = review_submission.copy() #Create a copy to avoid reuse
discrepancy_check = gen.xor(gen.partial_order(dependencies=[(review_submission_copy1, request_clarifications_of_discrepancies), (request_clarifications_of_discrepancies, receive_clarifications)]), gen.partial_order(dependencies=[(review_submission_copy2,)]))

# Risk assessment (concurrent)
risk_assessment = gen.partial_order(dependencies=[(evaluate_financial_risks,), (evaluate_operational_risks,), (evaluate_compliance_risks,)])

# High risk check (XOR) - corrected to use copies to avoid reuse
risk_assessment_copy = risk_assessment.copy()
launch_detailed_investigation_copy = launch_detailed_investigation.copy()
high_risk_check = gen.xor(gen.partial_order(dependencies=[(risk_assessment, launch_detailed_investigation), (launch_detailed_investigation, conduct_data_analysis), (launch_detailed_investigation, conduct_interviews), (launch_detailed_investigation, perform_site_visits)]), risk_assessment_copy)


# Complete risk mitigation
complete_risk_mitigation = gen.partial_order(dependencies=[(high_risk_check, compile_audit_report)])

# Audit report review and approval loop - corrected to use copies
review_report_by_audit_director_copy1 = review_report_by_audit_director.copy()
review_report_by_audit_director_copy2 = review_report_by_audit_director.copy()
audit_report_loop = gen.loop(do=gen.partial_order(dependencies=[(complete_risk_mitigation, review_report_by_audit_director_copy1)]),
                             redo=gen.partial_order(dependencies=[(review_report_by_audit_director_copy2, send_report_for_revision), (send_report_for_revision, update_and_resubmit_report), (update_and_resubmit_report, review_report_by_audit_director)]))

# Final phase (sequential)
final_phase = gen.partial_order(dependencies=[(audit_report_loop, approve_report), (approve_report, distribute_final_report), (approve_report, archive_report), (distribute_final_report, close_audit_process)])

# Overall process
final_model = gen.partial_order(dependencies=[(send_notification, concurrent_phase_1), (concurrent_phase_1, submit_documents), (submit_documents, discrepancy_check), (discrepancy_check, final_phase)])