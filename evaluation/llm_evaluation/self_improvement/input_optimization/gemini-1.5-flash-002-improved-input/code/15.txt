from utils.model_generation import ModelGenerator

gen = ModelGenerator()

# Activities
schedule_audit = gen.activity('Schedule compliance audit')
prepare_docs = gen.activity('Prepare documentation')
gather_evidence = gen.activity('Gather evidence')
self_assessment = gen.activity('Conduct self-assessment')
external_audit = gen.activity('Conduct external audit')
identify_gaps = gen.activity('Identify gaps or issues')
make_corrections = gen.activity('Make necessary corrections or improvements')
final_audit = gen.activity('Conduct final audit')
award_cert = gen.activity('Award certification')
issue_docs = gen.activity('Issue official documents')

# Parallel Phase 1
parallel_phase_1 = gen.partial_order(dependencies=[(prepare_docs,), (gather_evidence,), (self_assessment,)])

# Sequential Phase 2
sequential_phase_2 = gen.partial_order(dependencies=[(parallel_phase_1, external_audit), (external_audit, identify_gaps)])

# Corrective Action and Final Audit Loop. Creating copies to avoid reuse.
identify_gaps_copy1 = identify_gaps.copy()
make_corrections_copy1 = make_corrections.copy()
final_audit_copy1 = final_audit.copy()
identify_gaps_copy2 = identify_gaps.copy()
make_corrections_copy2 = make_corrections.copy()
final_audit_copy2 = final_audit.copy()


corrective_action_final_audit_loop = gen.loop(
    do=gen.partial_order(dependencies=[(sequential_phase_2, identify_gaps_copy1), (identify_gaps_copy1, make_corrections_copy1), (make_corrections_copy1, final_audit_copy1)]),
    redo=gen.partial_order(dependencies=[(final_audit_copy2, make_corrections_copy2)])
)


# Final Phase
final_audit_copy3 = final_audit.copy()
final_phase = gen.xor(gen.partial_order(dependencies=[(final_audit_copy3, award_cert), (award_cert, issue_docs)]), corrective_action_final_audit_loop)

# Complete Process
final_model = gen.partial_order(dependencies=[(schedule_audit, final_phase)])