from utils.model_generation import ModelGenerator

gen = ModelGenerator()

# Activities
file_complaint = gen.activity('File complaint')
log_complaint = gen.activity('Log complaint')
assign_complaint = gen.activity('Assign complaint to relevant department')
review_complaint = gen.activity('Review complaint details')
process_reimbursement = gen.activity('Process reimbursement')
approve_notify = gen.activity('Approve and notify customer')
reject_notify = gen.activity('Reject and notify customer')
resolve_complaint = gen.activity('Resolve complaint')
provide_feedback = gen.activity('Provide feedback')


# Sub-processes
refund_subprocess = gen.partial_order(dependencies=[(process_reimbursement, approve_notify.copy())])

# XOR Choice
xor_choice = gen.xor(refund_subprocess, reject_notify.copy()) #Corrected: Created a copy of reject_notify


# Partial Order for Resolution
#Corrected:  Created copies to avoid reuse.  The structure was correct, only the reuse was the issue.
poset_resolution = gen.partial_order(dependencies=[(approve_notify.copy(), resolve_complaint), (reject_notify.copy(), resolve_complaint), (resolve_complaint, provide_feedback)])


# Combine subprocesses sequentially
sequential_process = gen.partial_order(dependencies=[(file_complaint, log_complaint), (log_complaint, assign_complaint), (assign_complaint, review_complaint), (review_complaint, xor_choice), (xor_choice, poset_resolution)])

final_model = sequential_process