from utils.model_generation import ModelGenerator

gen = ModelGenerator()

# Initial steps
place_order = gen.activity('Place order')
record_order_details = gen.activity('Record order details')
process_payment = gen.activity('Process payment')

# Payment outcome choice
notify_about_failed_payment = gen.activity('Notify about failed payment')
payment_failed_path = notify_about_failed_payment

check_stock_availability = gen.activity('Check stock availability')

initiate_back_order = gen.activity('Initiate back-order')
inform_customer_about_delay = gen.activity('Inform customer about delay')
receive_back_order = gen.activity('Receive back-order')
back_order_path = gen.partial_order(dependencies=[(initiate_back_order, inform_customer_about_delay),
                                                  (inform_customer_about_delay, receive_back_order)])

stock_check_loop = gen.loop(do=check_stock_availability, redo=back_order_path)


payment_successful_path = gen.partial_order(dependencies=[(stock_check_loop,)])

payment_outcome_choice = gen.xor(payment_failed_path, payment_successful_path)

# Order fulfillment
pick_items_from_warehouse = gen.activity('Pick items from warehouse')
perform_quality_control_checks = gen.activity('Perform quality control checks')
package_items = gen.activity('Package items')
gift_wrap_items = gen.activity('Gift wrap items')
optional_gift_wrap = gen.xor(gift_wrap_items, None)
packaging_process = gen.partial_order(dependencies=[(pick_items_from_warehouse, perform_quality_control_checks),
                                                  (perform_quality_control_checks, package_items),
                                                  (package_items, optional_gift_wrap)])

prepare_shipping_documents_and_labels = gen.activity('Prepare shipping documents and labels')
prepare_documentation_for_international_orders = gen.activity(
    'Prepare documentation for international orders')
optional_international_docs = gen.xor(prepare_documentation_for_international_orders, None)
shipping_docs_process = gen.partial_order(
    dependencies=[(prepare_shipping_documents_and_labels, optional_international_docs)])


order_processing = gen.partial_order(dependencies=[(packaging_process,), (shipping_docs_process,)])



dispatch_order = gen.activity('Dispatch order')

# Post-dispatch activities
send_shipping_confirmation_to_customer = gen.activity('Send shipping confirmation to customer')
update_inventory_levels = gen.activity('Update inventory levels')


# Customer feedback and returns
send_follow_up_email = gen.activity('Send follow-up email')
customer_reports_issue = gen.activity('Customer reports issue')

send_return_shipping_label = gen.activity('Send return shipping label')
receive_returned_items = gen.activity('Receive returned items')
inspect_returned_items = gen.activity('Inspect returned items')
process_refund = gen.activity('Process refund')
process_replacement = gen.activity('Process replacement')
returns_process_choice = gen.xor(process_refund, process_replacement)
returns_process = gen.partial_order(
    dependencies=[(send_return_shipping_label, receive_returned_items),
                  (receive_returned_items, inspect_returned_items),
                  (inspect_returned_items, returns_process_choice)])
optional_returns = gen.xor(returns_process, None)

confirm_delivery = gen.activity('Confirm delivery')

final_model = gen.partial_order(
    dependencies=[(place_order, record_order_details), (record_order_details, process_payment),
                  (process_payment, payment_outcome_choice), (payment_outcome_choice, order_processing),
                 (order_processing, dispatch_order), (dispatch_order, send_shipping_confirmation_to_customer),
                  (dispatch_order, update_inventory_levels), (send_shipping_confirmation_to_customer, confirm_delivery), (confirm_delivery, send_follow_up_email),
                 (send_follow_up_email, optional_returns)])