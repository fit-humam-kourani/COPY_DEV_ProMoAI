from utils.model_generation import ModelGenerator

gen = ModelGenerator()

# Initial activities
guest_calls = gen.activity('Guest calls room service')
manager_takes_order = gen.activity('Manager takes down the order')
manager_submits_ticket = gen.activity('Manager submits order ticket to kitchen')

# Kitchen activity
kitchen_prepares_food = gen.activity('Kitchen prepares food')

# Alcoholic beverage handling
manager_gives_sommelier_order = gen.activity('Manager gives order to sommelier')
sommelier_prepares_drinks = gen.activity('Sommelier fetches wine and prepare alcoholic beverages')
optional_alcoholic_drinks = gen.xor(sommelier_prepares_drinks, None)


# Waiter activities
manager_assigns_order = gen.activity('Manager assigns order to waiter')
waiter_readies_cart = gen.activity('Waiter readies cart')
waiter_prepares_nonalcoholic_drinks = gen.activity('Waiter prepares nonalcoholic drinks')
waiter_delivers_order = gen.activity('Waiter delivers order to guest\'s room')
waiter_returns = gen.activity('Waiter returns to room-service station')
waiter_debits_account = gen.activity('Waiter debits guest\'s account')
waiter_delays_debiting = gen.activity('Waiter waits/delays debiting')
optional_delay_debiting = gen.loop(do=None, redo=waiter_delays_debiting)



# Combining waiter activities and dependencies
waiter_prepares_cart_and_drinks = gen.partial_order(dependencies=[(waiter_readies_cart,), (waiter_prepares_nonalcoholic_drinks,)]) # These can happen concurrently

# Create a copy for the partial order dependency!
optional_alcoholic_drinks_copy = optional_alcoholic_drinks.copy()
waiting_for_food_and_drinks = gen.partial_order(dependencies=[(kitchen_prepares_food,), (optional_alcoholic_drinks_copy,)])



# Create a copy of waiter_delivers_order for the dependency within the main partial order. This is the fix.
waiter_delivers_order_copy = waiter_delivers_order.copy()

waiter_collects_and_delivers = gen.partial_order(dependencies=[(waiting_for_food_and_drinks, waiter_delivers_order), (waiter_prepares_cart_and_drinks, waiter_delivers_order)])



# Main process flow
main_process = gen.partial_order(
    dependencies=[
        (guest_calls, manager_takes_order),
        (manager_takes_order, manager_submits_ticket),
        (manager_takes_order, optional_alcoholic_drinks),
        (manager_takes_order, manager_assigns_order),
        (manager_assigns_order, waiter_collects_and_delivers),
        (waiter_delivers_order_copy, waiter_returns), # Use the copy here!
        (waiter_returns, optional_delay_debiting),
        (optional_delay_debiting, waiter_debits_account)
    ]
)

final_model = main_process